{:rename-macros {}, :renames {}, :externs {requestAnimationFrame {}, Error {}}, :use-macros {}, :excludes #{}, :name citrus.core, :imports nil, :requires {r citrus.reconciler, citrus.reconciler citrus.reconciler, c citrus.cursor, citrus.cursor citrus.cursor}, :cljs.spec/speced-vars [], :uses nil, :defs {reconciler {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/core.cljs", :line 5, :column 7, :end-line 5, :end-column 17, :arglists (quote ([{:keys [state controllers effect-handlers batched-updates chunked-updates]} & {:as options}])), :doc "Creates an instance of Reconciler\n\n    (citrus/reconciler {:state (atom {})\n                        :controllers {:counter counter/control}\n                        :effect-handlers {:http effects/http}\n                        :batched-updates f\n                        :chunked-updates f})\n\n  Arguments\n\n    config              - a map of\n      state             - app state atom\n      controllers       - a hash of state controllers\n      effect-handlers   - a hash of effects handlers\n      batched-updates   - a function used to batch reconciler updates, defaults to `js/requestAnimationFrame`\n      chunked-updates   - a function used to divide reconciler update into chunks, doesn't used by default\n\n  Returned value supports deref, watches and metadata.\n  The only supported option is `:meta`", :top-fn {:variadic true, :max-fixed-arity 1, :method-params [({:keys [state controllers effect-handlers batched-updates chunked-updates]} {:as options})], :arglists ([{:keys [state controllers effect-handlers batched-updates chunked-updates]} & {:as options}]), :arglists-meta (nil)}}, :name citrus.core/reconciler, :variadic true, :file "resources/public/js/compiled/out/citrus/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 1, :method-params [({:keys [state controllers effect-handlers batched-updates chunked-updates]} {:as options})], :arglists ([{:keys [state controllers effect-handlers batched-updates chunked-updates]} & {:as options}]), :arglists-meta (nil)}, :method-params [({:keys [state controllers effect-handlers batched-updates chunked-updates]} {:as options})], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 5, :end-line 5, :max-fixed-arity 1, :fn-var true, :arglists ([{:keys [state controllers effect-handlers batched-updates chunked-updates]} & {:as options}]), :doc "Creates an instance of Reconciler\n\n    (citrus/reconciler {:state (atom {})\n                        :controllers {:counter counter/control}\n                        :effect-handlers {:http effects/http}\n                        :batched-updates f\n                        :chunked-updates f})\n\n  Arguments\n\n    config              - a map of\n      state             - app state atom\n      controllers       - a hash of state controllers\n      effect-handlers   - a hash of effects handlers\n      batched-updates   - a function used to batch reconciler updates, defaults to `js/requestAnimationFrame`\n      chunked-updates   - a function used to divide reconciler update into chunks, doesn't used by default\n\n  Returned value supports deref, watches and metadata.\n  The only supported option is `:meta`"}, dispatch! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/core.cljs", :line 36, :column 7, :end-line 36, :end-column 16, :arglists (quote ([reconciler controller event & args])), :doc "Invoke an event on particular controller asynchronously\n\n    (citrus/dispatch! reconciler :users :load \"id\")\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    controller - name of a controller\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(reconciler controller event args)], :arglists ([reconciler controller event & args]), :arglists-meta (nil)}}, :name citrus.core/dispatch!, :variadic true, :file "resources/public/js/compiled/out/citrus/core.cljs", :end-column 16, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(reconciler controller event args)], :arglists ([reconciler controller event & args]), :arglists-meta (nil)}, :method-params [(reconciler controller event args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 36, :end-line 36, :max-fixed-arity 3, :fn-var true, :arglists ([reconciler controller event & args]), :doc "Invoke an event on particular controller asynchronously\n\n    (citrus/dispatch! reconciler :users :load \"id\")\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    controller - name of a controller\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller"}, dispatch-sync! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/core.cljs", :line 50, :column 7, :end-line 50, :end-column 21, :arglists (quote ([reconciler controller event & args])), :doc "Invoke an event on particular controller synchronously\n\n    (citrus/dispatch! reconciler :users :load \"id\")\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    controller - name of a controller\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller", :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(reconciler controller event args)], :arglists ([reconciler controller event & args]), :arglists-meta (nil)}}, :name citrus.core/dispatch-sync!, :variadic true, :file "resources/public/js/compiled/out/citrus/core.cljs", :end-column 21, :top-fn {:variadic true, :max-fixed-arity 3, :method-params [(reconciler controller event args)], :arglists ([reconciler controller event & args]), :arglists-meta (nil)}, :method-params [(reconciler controller event args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 50, :end-line 50, :max-fixed-arity 3, :fn-var true, :arglists ([reconciler controller event & args]), :doc "Invoke an event on particular controller synchronously\n\n    (citrus/dispatch! reconciler :users :load \"id\")\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    controller - name of a controller\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller"}, broadcast! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/core.cljs", :line 64, :column 7, :end-line 64, :end-column 17, :arglists (quote ([reconciler event & args])), :doc "Invoke an event on all controllers asynchronously\n\n    (citrus/broadcast! reconciler :init)\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(reconciler event args)], :arglists ([reconciler event & args]), :arglists-meta (nil)}}, :name citrus.core/broadcast!, :variadic true, :file "resources/public/js/compiled/out/citrus/core.cljs", :end-column 17, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(reconciler event args)], :arglists ([reconciler event & args]), :arglists-meta (nil)}, :method-params [(reconciler event args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 64, :end-line 64, :max-fixed-arity 2, :fn-var true, :arglists ([reconciler event & args]), :doc "Invoke an event on all controllers asynchronously\n\n    (citrus/broadcast! reconciler :init)\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller"}, broadcast-sync! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/core.cljs", :line 77, :column 7, :end-line 77, :end-column 22, :arglists (quote ([reconciler event & args])), :doc "Invoke an event on all controllers synchronously\n\n    (citrus/broadcast! reconciler :init)\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller", :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(reconciler event args)], :arglists ([reconciler event & args]), :arglists-meta (nil)}}, :name citrus.core/broadcast-sync!, :variadic true, :file "resources/public/js/compiled/out/citrus/core.cljs", :end-column 22, :top-fn {:variadic true, :max-fixed-arity 2, :method-params [(reconciler event args)], :arglists ([reconciler event & args]), :arglists-meta (nil)}, :method-params [(reconciler event args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 77, :end-line 77, :max-fixed-arity 2, :fn-var true, :arglists ([reconciler event & args]), :doc "Invoke an event on all controllers synchronously\n\n    (citrus/broadcast! reconciler :init)\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    event      - a dispatch value of a method defined in the controller\n    args       - arguments to be passed into the controller"}, subscription {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/core.cljs", :line 91, :column 7, :end-line 91, :end-column 19, :arglists (quote ([reconciler path] [reconciler path reducer])), :doc "Create a subscription to state updates\n\n    (citrus/subscription reconciler [:users 0] (juxt [:fname :lname]))\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    path       - a vector which describes a path into reconciler's atom value\n    reducer    - an aggregate function which computes a materialized view of data behind the path", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reconciler path] [reconciler path reducer]), :arglists ([reconciler path] [reconciler path reducer]), :arglists-meta (nil nil)}}, :name citrus.core/subscription, :variadic false, :file "resources/public/js/compiled/out/citrus/core.cljs", :end-column 19, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([reconciler path] [reconciler path reducer]), :arglists ([reconciler path] [reconciler path reducer]), :arglists-meta (nil nil)}, :method-params ([reconciler path] [reconciler path reducer]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 3, :fn-var true, :arglists ([reconciler path] [reconciler path reducer]), :doc "Create a subscription to state updates\n\n    (citrus/subscription reconciler [:users 0] (juxt [:fname :lname]))\n\n  Arguments\n\n    reconciler - an instance of Reconciler\n    path       - a vector which describes a path into reconciler's atom value\n    reducer    - an aggregate function which computes a materialized view of data behind the path"}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:controllers :batched-updates :meta :chunked-updates :state :effect-handlers}, :order [:state :controllers :effect-handlers :batched-updates :chunked-updates :meta]}, :doc nil}
{:rename-macros {}, :renames {}, :externs {cancelAnimationFrame {}}, :use-macros {}, :excludes #{}, :name citrus.reconciler, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {dispatch! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 17, :column 4, :end-line 17, :end-column 13, :protocol citrus.reconciler/IReconciler, :doc nil, :arglists (quote ([this controller event args]))}, :protocol citrus.reconciler/IReconciler, :name citrus.reconciler/dispatch!, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 13, :method-params ([this controller event args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 17, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this controller event args])), :doc nil}, clear-queue! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 7, :column 8, :end-line 7, :end-column 20, :private true, :arglists (quote ([queue]))}, :private true, :name citrus.reconciler/clear-queue!, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 20, :method-params ([queue]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([queue]))}, IReconciler {:meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 16, :column 14, :end-line 16, :end-column 25, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {dispatch! [[this controller event args]], dispatch-sync! [[this controller event args]], broadcast! [[this event args]], broadcast-sync! [[this event args]]}}}, :protocol-symbol true, :name citrus.reconciler/IReconciler, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 25, :column 1, :line 16, :protocol-info {:methods {dispatch! [[this controller event args]], dispatch-sync! [[this controller event args]], broadcast! [[this event args]], broadcast-sync! [[this event args]]}}, :info nil, :end-line 16, :tag any, :impls #{citrus.reconciler/Reconciler}, :doc nil, :jsdoc ("@interface")}, broadcast-sync! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 20, :column 4, :end-line 20, :end-column 19, :protocol citrus.reconciler/IReconciler, :doc nil, :arglists (quote ([this event args]))}, :protocol citrus.reconciler/IReconciler, :name citrus.reconciler/broadcast-sync!, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 19, :method-params ([this event args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this event args])), :doc nil}, queue-effects! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 4, :column 8, :end-line 4, :end-column 22, :private true, :arglists (quote ([queue f]))}, :private true, :name citrus.reconciler/queue-effects!, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 22, :method-params ([queue f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 4, :end-line 4, :max-fixed-arity 2, :fn-var true, :arglists (quote ([queue f]))}, ->Reconciler {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 22, :column 10, :end-line 22, :end-column 20, :protocols #{cljs.core/IWatchable cljs.core/IAtom citrus.reconciler/IReconciler cljs.core/IEquiv cljs.core/IHash citrus.reconciler/Object cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :factory :positional, :arglists (quote ([controllers effect-handlers state queue scheduled? batched-updates chunked-updates meta]))}, :protocols #{cljs.core/IWatchable cljs.core/IAtom citrus.reconciler/IReconciler cljs.core/IEquiv cljs.core/IHash citrus.reconciler/Object cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :name citrus.reconciler/->Reconciler, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 20, :method-params ([controllers effect-handlers state queue scheduled? batched-updates chunked-updates meta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :factory :positional, :line 22, :end-line 22, :max-fixed-arity 8, :fn-var true, :arglists (quote ([controllers effect-handlers state queue scheduled? batched-updates chunked-updates meta])), :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}}, Reconciler {:num-fields 8, :protocols #{cljs.core/IWatchable cljs.core/IAtom citrus.reconciler/IReconciler cljs.core/IEquiv cljs.core/IHash citrus.reconciler/Object cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}, :name citrus.reconciler/Reconciler, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 20, :type true, :column 10, :line 22, :record false, :end-line 22, :skip-protocol-flag #{cljs.core/IWatchable cljs.core/IAtom cljs.core/IEquiv cljs.core/IHash cljs.core/IMeta cljs.core/IDeref cljs.core/IPrintWithWriter}}, dispatch-sync! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 18, :column 4, :end-line 18, :end-column 18, :protocol citrus.reconciler/IReconciler, :doc nil, :arglists (quote ([this controller event args]))}, :protocol citrus.reconciler/IReconciler, :name citrus.reconciler/dispatch-sync!, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 18, :method-params ([this controller event args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 18, :max-fixed-arity 4, :fn-var true, :arglists (quote ([this controller event args])), :doc nil}, broadcast! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 19, :column 4, :end-line 19, :end-column 14, :protocol citrus.reconciler/IReconciler, :doc nil, :arglists (quote ([this event args]))}, :protocol citrus.reconciler/IReconciler, :name citrus.reconciler/broadcast!, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 14, :method-params ([this event args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 16, :end-line 19, :max-fixed-arity 3, :fn-var true, :arglists (quote ([this event args])), :doc nil}, schedule-update! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/resources/public/js/compiled/out/citrus/reconciler.cljs", :line 10, :column 8, :end-line 10, :end-column 24, :private true, :arglists (quote ([schedule! scheduled? f]))}, :private true, :name citrus.reconciler/schedule-update!, :variadic false, :file "resources/public/js/compiled/out/citrus/reconciler.cljs", :end-column 24, :method-params ([schedule! scheduled? f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 10, :end-line 10, :max-fixed-arity 3, :fn-var true, :arglists (quote ([schedule! scheduled? f]))}}, :cljs.spec/registry-ref [], :require-macros {m citrus.macros, citrus.macros citrus.macros}, :cljs.analyzer/constants {:seen #{effect-handlers :else controllers batched-updates meta :val :state queue chunked-updates scheduled? state}, :order [:val :state :else controllers effect-handlers state queue scheduled? batched-updates chunked-updates meta]}, :doc nil}
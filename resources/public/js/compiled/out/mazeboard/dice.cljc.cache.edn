{:rename-macros {}, :renames {}, :use-macros {}, :excludes #{}, :name mazeboard.dice, :imports nil, :requires nil, :cljs.spec/speced-vars [], :uses nil, :defs {make-dice {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljc/mazeboard/dice.cljc", :line 3, :column 7, :end-line 3, :end-column 16, :arglists (quote ([]))}, :name mazeboard.dice/make-dice, :variadic false, :file "src/cljc/mazeboard/dice.cljc", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, make-coin {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljc/mazeboard/dice.cljc", :line 8, :column 7, :end-line 8, :end-column 16, :arglists (quote ([]))}, :name mazeboard.dice/make-coin, :variadic false, :file "src/cljc/mazeboard/dice.cljc", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 8, :end-line 8, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, from-dice-type {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljc/mazeboard/dice.cljc", :line 12, :column 7, :end-line 12, :end-column 21, :arglists (quote ([dice-type]))}, :name mazeboard.dice/from-dice-type, :variadic false, :file "src/cljc/mazeboard/dice.cljc", :end-column 21, :method-params ([dice-type]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dice-type]))}, roll-dice {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljc/mazeboard/dice.cljc", :line 17, :column 7, :end-line 17, :end-column 16, :arglists (quote ([dice]))}, :name mazeboard.dice/roll-dice, :variadic false, :file "src/cljc/mazeboard/dice.cljc", :end-column 16, :method-params ([dice]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dice]))}}, :cljs.spec/registry-ref [], :require-macros nil, :cljs.analyzer/constants {:seen #{:down :move :up :turn :right :dice :left}, :order [:move :up :left :down :right :turn :dice]}, :doc nil}
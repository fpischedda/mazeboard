{:rename-macros {}, :renames {}, :externs {document {querySelector {}}}, :use-macros {}, :excludes #{}, :name mazeboardui.dom, :imports nil, :requires {str clojure.string, clojure.string clojure.string, classes goog.dom.classes, goog.dom.classes goog.dom.classes}, :cljs.spec/speced-vars [], :uses nil, :defs {q {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :line 6, :column 7, :end-line 6, :end-column 8, :arglists (quote ([selector]))}, :name mazeboardui.dom/q, :variadic false, :file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :end-column 8, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 6, :end-line 6, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector]))}, set-value! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :line 9, :column 7, :end-line 9, :end-column 17, :arglists (quote ([el value]))}, :name mazeboardui.dom/set-value!, :variadic false, :file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :end-column 17, :method-params ([el value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 9, :end-line 9, :max-fixed-arity 2, :fn-var true, :arglists (quote ([el value]))}, value {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :line 12, :column 7, :end-line 12, :end-column 12, :arglists (quote ([el]))}, :name mazeboardui.dom/value, :variadic false, :file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :end-column 12, :method-params ([el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el]))}, elem-value {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :line 17, :column 7, :end-line 17, :end-column 17, :arglists (quote ([selector]))}, :name mazeboardui.dom/elem-value, :variadic false, :file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :end-column 17, :method-params ([selector]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([selector]))}, add-class! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :line 20, :column 7, :end-line 20, :end-column 17, :arglists (quote ([node class])), :doc "Adds the specified CSS class to each node in the content."}, :name mazeboardui.dom/add-class!, :variadic false, :file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :end-column 17, :method-params ([node class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node class])), :doc "Adds the specified CSS class to each node in the content."}, remove-class! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :line 26, :column 7, :end-line 26, :end-column 20, :arglists (quote ([node class])), :doc "Removes the specified CSS class from each node in the content."}, :name mazeboardui.dom/remove-class!, :variadic false, :file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :end-column 20, :method-params ([node class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 26, :end-line 26, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node class])), :doc "Removes the specified CSS class from each node in the content."}, toggle-class! {:protocol-inline nil, :meta {:file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :line 32, :column 7, :end-line 32, :end-column 20, :arglists (quote ([node class])), :doc "Toggles the specified CSS class from each node in the content."}, :name mazeboardui.dom/toggle-class!, :variadic false, :file "/Users/francesco/own/mazeboard/src/cljs/mazeboardui/dom.cljs", :end-column 20, :method-params ([node class]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([node class])), :doc "Toggles the specified CSS class from each node in the content."}}, :cljs.spec/registry-ref [], :require-macros nil, :doc nil}